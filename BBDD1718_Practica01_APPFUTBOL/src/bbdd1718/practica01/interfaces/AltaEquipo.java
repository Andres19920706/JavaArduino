/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.

https://es.stackoverflow.com/questions/75982/es-posible-seleccionar-varios-datos-insertados-en-un-jlist-en-java
 */
package bbdd1718.practica01.interfaces;


import bbdd1718.practica01.clases.AppFutbol;
import bbdd1718.practica01.clases.Equipo;
import bbdd1718.practica01.clases.Estadio;
import bbdd1718.practica01.clases.Jugador;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Andres
 */
public class AltaEquipo extends javax.swing.JFrame {

    /**
     * Creates new form AltaEquipo
     */
    public AltaEquipo() {
        initComponents();
        //Mostramos
        //Lista de Estadiso
        this.jListaEstadios.addItem("Seleccione estadio");
        for(Estadio es : AppFutbol.lEstadios.values()){
            this.jListaEstadios.addItem(es.getIdEstadio()+": " + es.getCiudad());
        }
        
        //Lista de Jugadores Disponibles
        DefaultListModel modelo = new DefaultListModel(); //Contendor
        for (Map.Entry<Integer, Jugador> entry : AppFutbol.lJugadoresDisponibles.entrySet()) {
            modelo.addElement(entry.getKey()+": "+entry.getValue().nombre+" ->"+entry.getValue().getPosicion()); //modelo.addElement(ju.nombre);
        }
        this.jListaJugadoresDisponibles.setModel(modelo); //Lo a√±addimos al jList
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitulo = new javax.swing.JLabel();
        labelSubTitulo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        inputIdEquipo = new javax.swing.JTextField();
        labelNombre = new javax.swing.JLabel();
        inputNombre = new javax.swing.JTextField();
        labelEstadio = new javax.swing.JLabel();
        jListaEstadios = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListaJugadoresDisponibles = new javax.swing.JList<>();
        buttonCancel = new javax.swing.JButton();
        buttonLimpiar = new javax.swing.JButton();
        buttonAceptar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTitulo.setText("App Futbol Menu");

        labelSubTitulo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelSubTitulo.setText("Alta Equipo");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("ID Equipo:");

        labelNombre.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelNombre.setText("Nombre:");

        labelEstadio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelEstadio.setText("Estadio:");

        jListaEstadios.setToolTipText("Id Estadio: Ciudad Estadio");
        jListaEstadios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jListaEstadiosActionPerformed(evt);
            }
        });

        jListaJugadoresDisponibles.setToolTipText("ID - Nombre - Posicion");
        jScrollPane1.setViewportView(jListaJugadoresDisponibles);

        buttonCancel.setText("Menu");
        buttonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonCancelMouseClicked(evt);
            }
        });
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonLimpiar.setText("Limpiar");
        buttonLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonLimpiarMouseClicked(evt);
            }
        });
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        buttonAceptar.setText("Aceptar");
        buttonAceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonAceptarMouseClicked(evt);
            }
        });
        buttonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAceptarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Jugadores Disponibles:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelSubTitulo)
                .addGap(159, 159, 159))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(labelTitulo))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(labelNombre)
                                    .addGap(18, 18, 18)
                                    .addComponent(inputNombre))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(labelEstadio))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jListaEstadios, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(inputIdEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buttonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addComponent(buttonCancel)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labelTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSubTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(inputIdEquipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNombre)
                            .addComponent(inputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelEstadio)
                            .addComponent(jListaEstadios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(buttonAceptar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonLimpiar)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonCancel)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListaEstadiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jListaEstadiosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jListaEstadiosActionPerformed

    private void buttonAceptarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonAceptarMouseClicked
        // Bot√≥n para dar de alta al arbitro.
        //Variables locales
        final String[] MSG = {"Datos incompletos o vac√≠os","Identificador del equipo repetido",
            "Identficador erroneo","Nombre del equipo repetido","Numero de jugadores selecionados erroneo",
            "Pisicion del jugador repetida","En el equipo no hay titular"};
        boolean crearEquipo=false; //true-> Crea estadio, false-> No crea estadio,
        boolean reemplazar = true; //true -> reemplazar equipo o id no repetido
                                   //false -> id repetido y no se reemplaza
        boolean nameUsado = false; //true -> nombre en uso, false -> nombre no en uso  
        boolean selecError = true; //true -> numero de jugadores ok, false -> numero de jugadores no ok
        boolean titular = true; //false -> no existe titular, true -> ya hay titular
        boolean posicionRepetida = false; //true -> se repite lan posicones, false -> no se repiten las posicones
        
        ArrayList selec = null; //Variable para contener el valor de los jugadores seleccionados 
        
            //Par√°metros de un equipo
        int idEquipo = 0; //Identificador del equipo.
        String nameEquipo = ""; //Nombre del Equipo
        ArrayList<Jugador> lju = new ArrayList<>(); //Lista de jugadores en el Equipo
        Estadio es = null; //Estadio del equipo
        
        //Creamos el Equipo
        //1¬∫) Comprobamos que los campos de entrada no est√©n vacios.
        if( this.inputIdEquipo.getText().equals("") || 
            this.inputNombre.getText().equals("") || 
            this.jListaJugadoresDisponibles.getSelectedValue() == null || 
            this.jListaEstadios.getSelectedIndex() == 0 ){//Todos o alg√∫n campo vac√≠o
            JOptionPane.showMessageDialog(null, MSG[0],
                        "AppFutbol",JOptionPane.ERROR_MESSAGE);
        }else{ //Todos los campos est√°n con datos
            
            //2¬∫) Extraemos los par√°metros del equipo
            
            try{
                idEquipo = Integer.parseInt(this.inputIdEquipo.getText() ); //Identificador del equipo.
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, MSG[2],"AppFutbol",JOptionPane.ERROR_MESSAGE);
                idEquipo = -1; //Indicamos que el identificador introducido es erroneo
            }
            
            if(idEquipo!=-1){//
                //2.1) Comprobamos si el id del equipo ya esta en uso
                if(AppFutbol.lEquipos.get(idEquipo)!=null){//El identificador del equipo esta en uso
                    //Preguntamos si quiere remplazarlo
                    int y= JOptionPane.showConfirmDialog(null, MSG[1]+" ¬øRemplazar equipo de la lista? ",
                        "AppFutbol",JOptionPane.YES_NO_OPTION);
                    if(y==JOptionPane.NO_OPTION){//Dijo que no queria borrar el equipo ya existente 
                        reemplazar=false;
                    }else{//2.1.1) Damos de baja el equipo para poder reemplazarlo
                        
                        if(!AppFutbol.BajaEquipo(idEquipo)){
                            reemplazar=false; //Error al dar de baja en el equipo
                        }
                        
                    }
                }
                
                //2.2) Comprobamos que el nombre del equipo no este en uso.
                if(reemplazar){
                    nameEquipo = this.inputNombre.getText(); //Nombre del equipo introducio por el usuario
                    
                    for(Equipo eq : AppFutbol.lEquipos.values()){
                        if(eq.getNameEquipo().equals(nameEquipo)){ //Indamos que el nombre ya esta siendo usado, no se permite reemplazar.
                            JOptionPane.showMessageDialog(null,MSG[3],"AppFutbol",JOptionPane.ERROR_MESSAGE);
                            nameUsado = true; //El nombre del equipo ya esta usado
                        }
                    }
                }
                
                //2.3) Comprobamos el numero de jugadores seleccionados.
                if(!nameUsado && reemplazar ){
                    selec = (ArrayList) this.jListaJugadoresDisponibles.getSelectedValuesList(); //Jugadores seleccionados por el usuario
                
                    if(selec.size()!=AppFutbol.posicionesJugador.length){
                        //N√∫mero de jugadores seleccionados no coincide con el n√∫mero de posicoines disponibles
                        JOptionPane.showMessageDialog(null, MSG[4]+"\n El numero de jugadores ha de ser de "+AppFutbol.posicionesJugador.length,
                            "AppFutbol",JOptionPane.ERROR_MESSAGE);
                        selecError=false; //No se puede crear equipo
                    }
                
                }
                
                //2.4) Comprobamos que las posiocnes no se repitan y seleccionamos titular
                if(selecError && !nameUsado && reemplazar ){
                    titular = false;
                    for(int i = 0; i < selec.size();i++){
                        String [] keyStringJugador = selec.get(i).toString().split(":"); //Extraemos el id, como String
                        int keyIntJugador = Integer.parseInt(keyStringJugador[0]); //Convertimos la key extraida como string a entero
                        
                        //2.4.1) Preguntamos si poner como titular al jugador
                        if(!titular){
                            //No hay titular en el equipo preguntamos por si quiere este jugador como titular
                            int y= JOptionPane.showConfirmDialog(null, "¬ø"+AppFutbol.lJugadoresDisponibles.get(keyIntJugador).nombre+" como titular?",
                                    "AppFutbol",JOptionPane.YES_NO_OPTION);
                            if(y==JOptionPane.YES_OPTION){//El jugador solicitado como titular
                                titular = true; //Ya no es necesario preguntar m√°s por un titular.
                                AppFutbol.lJugadores.get(keyIntJugador).setTitular(true); //Aseguramos que sea titular
                            }else{
                                AppFutbol.lJugadores.get(keyIntJugador).setTitular(false); //Aseguramos que no sea titual
                            }
                        }else{
                            //Ya hay titular en el equipo, el resto de jugadores no lo son
                            AppFutbol.lJugadores.get(keyIntJugador).setTitular(false);
                        }

                        //2.4.2) Comprobamos que la posicion no se repita
                        int j=0;
                        while(j<AppFutbol.numeroPosiciones.length && !posicionRepetida){
                            
                            //2.4.2.a) Detectamos la posicion del jugador
                            if(AppFutbol.lJugadores.get(keyIntJugador).getPosicion().equals(AppFutbol.posicionesJugador[j])){
                                //2.4.2.b) Comprobamos que en el equipo no exista un jugador con esta posicion
                                if(AppFutbol.numeroPosiciones[j]){
                                    posicionRepetida=true; //La posicion ya esta repetida
                                    JOptionPane.showMessageDialog(null, MSG[5]+": "+AppFutbol.posicionesJugador[j],
                                        "AppFutbol",JOptionPane.ERROR_MESSAGE);
                                    j=AppFutbol.numeroPosiciones.length; //Forzamos la salida del while
                                }else{
                                    AppFutbol.numeroPosiciones[j]=true; //Indicamos que esta posicon ya esta escogida
                                    j++; //Comprobamos la siguiente posicion
                                }
                            }else{
                                j++;
                            }
                        }
                        
                        //2.4.3) A√±adimos el jugador a la lista
                        if(!posicionRepetida){//Si hay titular y no se repite la posicion
                            lju.add( AppFutbol.lJugadores.get(keyIntJugador)); //Lo a√±adimos a la lista del equipo
                        }
                    }
                    
                    //2.4.4) Reseteamos la variable que permita comprobar si se repite o no las posiciones
                    for(int i=0;i<AppFutbol.numeroPosiciones.length;i++){
                        AppFutbol.numeroPosiciones[i]=false; //Valor por defecto.
                    }
                }
                
                //2.5) Extraemos el estadio del equipo
                if(!titular){
                    //Informamos
                    JOptionPane.showMessageDialog(null, MSG[6],
                        "AppFutbol",JOptionPane.ERROR_MESSAGE);
                }else{
                    if(lju.size()==AppFutbol.posicionesJugador.length ){//Se a√±adieron correctaemnte los jugadores
                        String [] keyStringEstadio = ((String) this.jListaEstadios.getSelectedItem()).split(":"); //Valor del jlistEstadios
                        int keyIntEstadio = Integer.parseInt(keyStringEstadio[0]); //Identificador del estadio
                        
                        es = AppFutbol.lEstadios.get(keyIntEstadio); //A√±adimos el esteadio al equipo
                        crearEquipo = true;
                    }
                }
            }
            //Damos de alta el equipo, con la posici√≥n 0
            if(crearEquipo){
                
                Equipo eq = new Equipo(idEquipo,0,nameEquipo,es,lju);
                if(AppFutbol.AltaEquipo(eq)){//Se ha dado de alta el equipo
                    for(Jugador ju : eq.getLjuga()){
                        AppFutbol.lJugadoresDisponibles.remove(ju.id);
                    }
                    this.dispose();
                    AppFutbol.iu.setVisible(true);
                }
            }  
        }
    
    }//GEN-LAST:event_buttonAceptarMouseClicked

    private void buttonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAceptarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonAceptarActionPerformed

    private void buttonLimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonLimpiarMouseClicked
        // Bot√≥n para limpiar cajas de Texto
        this.inputIdEquipo.setText("");
        this.inputNombre.setText("");        
        this.jListaJugadoresDisponibles.setSelectedIndex(0);
        this.jListaEstadios.setSelectedIndex(0);
        this.jListaJugadoresDisponibles.removeSelectionInterval(0,AppFutbol.lJugadoresDisponibles.size()); //Comprobar
    }//GEN-LAST:event_buttonLimpiarMouseClicked

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void buttonCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCancelMouseClicked
        // Bot√≥n para volver al men√∫
        this.dispose();
        AppFutbol.iu.setVisible(true);
    }//GEN-LAST:event_buttonCancelMouseClicked

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AltaEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AltaEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AltaEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AltaEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AltaEquipo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAceptar;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JTextField inputIdEquipo;
    private javax.swing.JTextField inputNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> jListaEstadios;
    private javax.swing.JList<String> jListaJugadoresDisponibles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelEstadio;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelSubTitulo;
    private javax.swing.JLabel labelTitulo;
    // End of variables declaration//GEN-END:variables
}
